// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>


/* Homerow mods */

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // right hand
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                      // thumbs

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_BEHAVIOR(NAME, hold_tap, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )
MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs

// Home row mods macro

#define HRML(k1,k2,k3,k4) &ht LSHFT k1  &ht LALT k2  &ht LCTRL k3  &ht LGUI k4
#define HRMR(k1,k2,k3,k4) &ht RGUI k1  &ht RCTRL k2  &ht RALT k3  &ht RSHFT k4

/ {
    behaviors {
        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
            bindings = <&kp>, <&kp>;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q           &kp W           &kp E       &kp R           &kp T           &kp Y           &kp U           &kp I       &kp O           &kp P
&hml LCTRL A    &hml LCMD S     &lt 2 D     &hml LSHIFT F   &hml LALT G     &hmr RALT H     &hmr RSHIFT J   &kp K       &hmr RCMD L     &ht RCTRL SEMI
&kp Z           &kp X           &kp C       &kp V           &kp B           &kp N           &kp M           &kp COMMA   &kp PERIOD      &kp SLASH
                                            &lt 1 SPACE     &kp TAB         &kp ENTER       &kp BACKSPACE
            >;
        };

        symbols {
            bindings = <
&trans        &kp ESCAPE  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp PIPE     &trans     &kp N7        &kp N8        &kp N9        &kp ASTERISK
&trans        &kp TILDE   &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp SQT      &kp MINUS  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp MINUS
&kp CAPSLOCK  &kp HASH    &kp LEFT_BRACKET      &kp RBKT               &kp GRAVE    &kp EQUAL  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp EQUAL
                                                &trans                 &trans       &trans     &kp N0
            >;
        };

        arrows {
            bindings = <
&trans  &trans  &trans        &trans        &bt BT_CLR    &trans  &trans          &kp UP_ARROW    &trans           &trans
&trans  &trans  &bt BT_SEL 1  &bt BT_SEL 0  &trans        &trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans
&trans  &trans  &trans        &trans        &trans        &trans  &trans          &trans          &trans           &trans
                              &trans        &trans        &trans  &trans
            >;
        };
    };
};
